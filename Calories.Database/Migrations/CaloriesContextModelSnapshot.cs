// <auto-generated />
using System;
using Calories.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Calories.Database.Migrations
{
    [DbContext(typeof(CaloriesContext))]
    partial class CaloriesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Calories.Data.Exercise", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CountedCalories")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ExerciseTypeID");

                    b.HasKey("ID");

                    b.HasIndex("ExerciseTypeID");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Calories.Data.ExerciseType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(75);

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("Calories.Data.ExerciseTypeRule", b =>
                {
                    b.Property<int>("ExerciseTypeID");

                    b.Property<decimal>("CaloriesModifier")
                        .HasColumnType("decimal(10,5)");

                    b.HasKey("ExerciseTypeID");

                    b.ToTable("ExerciseTypeRules");
                });

            modelBuilder.Entity("Calories.Data.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Calcium")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Carbonhydrates")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Copper")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal?>("Fat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Iron")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal?>("Jod")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal?>("Magnes")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal?>("Mangan")
                        .HasColumnType("decimal(14,8)");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Phosphor")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal?>("Potas")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal?>("Proteins")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Roughage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SizeTypeID");

                    b.Property<decimal?>("Sodium")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal?>("Zinc")
                        .HasColumnType("decimal(14,8)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SizeTypeID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Calories.Data.IngredientIntake", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(9,3)");

                    b.Property<int>("IngredientID");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("ID", "Date");

                    b.HasIndex("IngredientID");

                    b.ToTable("IngredientIntakes");
                });

            modelBuilder.Entity("Calories.Data.SizeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("SizeTypes");
                });

            modelBuilder.Entity("Calories.Data.Weight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Weights");
                });

            modelBuilder.Entity("Calories.Data.Exercise", b =>
                {
                    b.HasOne("Calories.Data.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Calories.Data.ExerciseTypeRule", b =>
                {
                    b.HasOne("Calories.Data.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Calories.Data.Ingredient", b =>
                {
                    b.HasOne("Calories.Data.SizeType", "SizeType")
                        .WithMany()
                        .HasForeignKey("SizeTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Calories.Data.IngredientIntake", b =>
                {
                    b.HasOne("Calories.Data.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
